Here in Appis JavaScript instead of using getElementById, getElementByClass, getElementByTag; we use:
 a. querySelector: Is a selector that lets us to choose or select anything from DOM that i specify within your first argument in the form of a string, that if bound with CSS.
  b. querySelectorAll: It does the same as the first bit it select everything from DOM that i specify within your first argument, besides it has nodelist; and nodelist is a object that specify the abstraction of a ordered nodes collection. Can be accessed to the Nodelist elements by means of a integral index, but it is diferntiated because it haven't operations that arrays has for example: map, some, filter reduce, etc; Is recomended convert it in a array so: var or const nodeAsArray =[...nodeList].
  How to make a node?
To create a node we can do so:
 1.Create a element so:
     document.createElement("tags").
     So:
       const mar = document.querySelector("div.bd-code-snippet");
       const add = document.createElement("h3");
        mar.appendChild(h3);
  2.Create a text so:
    document.createTextContent("text).  
To add nodes we can do so:
 1.Element.appendChild.
   To do a appendChild i gonna to need:
   a.A reference node.
   b.A node that i'll add.
  That's is good to add it in the code to work in diferents navigators.
 2.Element.append.
   That's is good to add it in the code to work in diferents navigators with the exception of internet explorer.
 3.Element.insertBefore.
   This node make elements before of reference node.
 4.Element.insertAdjacentElement.
And to add comments in JavaScript we use: //
To show various things in the browser we use:
  /*Escape sequences:
    Code    /  Result
    \'          Single quotation mark<comilla>
    \"          Double quotation mark
    \\          Backslash <barra invertida>
    \n          New line
    \r          Carriage return <retorno de carro>
    \t          Tabulation
    \b          Recoil <retroceso>
    \f          Page break <salto de pagina>
To refer to a internal element of an Array we use: x([Element][Internal element]);
To add new dates to our Array we use: 
  var x = [];
  x.push("Hi);
To delete the ultimate element of a Array we use:
  var y =["a", "b"];
  y.pop();
  And this method is be able to delete the ultimate element of the Array, And to show that element individually simply y save that so:
     var y =["a", "b"];
     var x;
     x = y.pop();
To delete the first element of a Array we use:
  var y =["a", "b"];
  y.shift();
  To add the a new element initially of a Array we use:
  var y =["a", "b"];
  y.unshift("A");
To give back some values in a function we use:
  function xd (){
     return x + y;
  }
 And to save that we use:
   function xd (){
     return x + y;
    }
    var resultado = xd();
To show my Array in console there is a special function in JavaScript that shows my Array:
  console.log(JSON.stringify(myArray));
To show that something is different that another thing we use the operator:
 !=
Truth tables
      &&
  x  y  x && y
  t  t    t
  t  f    f 
  f  t    f
  f  f    f 

      or
   x  y  x || y 
   t  t    t 
   t  f    t 
   f  t    t 
   f  f    f 

      NOT 
   x  y  !x !y 
   t  t  f  f 
   t  f  f  t 
   f  t  t  f 
   f  f  t  t 
To create elements in JavaScript we use:
  var x = {
    y = a;
    i = s; 
    o = d; 
    j = f;
  }
  Or we create a Array.
To update a variable of a Array or a object we use:
  var x = {      var x = [
     y = a;           y = a;
    i = s;            i = s; 
    o = d;            o = d; 
    j = f;            j = f;
  }                   ]    
  x.y = b             x[y] = b
  To add news properties to a object we use:
    x.c<new property> = r   x[c] = r;
  To delete a property of a object we use:
    delete x.i;  delete x[i];
  To verify if a object has a property we use:
    x.hasOwnProperty(y);
To show something in mayus we use the function: 
  x.toUpperCase(y);
The cycles do while are used to ask for users datas and then verify its.
When i want to do news functions but if the data what the client is looking for but that isn't found we can use:
  return xy || z<Message that i show to the usuary what who says that what he is looking for is not there>;
To do a conditional in a single line we can use:
 For example: 
  function c(){
    return x > y ? x : y;
  }
The difference between to declare a variable with var and to declare a variable with let is:
  With var we can declare the same variable twice and i don't get an error.
  Whit let i only can declare the same variable just one time.
Another difference between var and let is what if i use let in a function, conditional or cycle this only works inside of the function, conditional or cycle but that  one won't show outside of then and that'll show an error.
We can declare a variable with const but i don't change the value once given. But there is only one way to upload a const in JavaScript so:
  const x = [0, 1, 2, 3 ,4];
  x[0] = 5;
  x[1] = 6;
  x[2] = 7;
  x[3] = 8;
  x[4] = 9;
When i'm do some objects in JavaScript and i don't want to add new things in these elements i would do this:
 1. First i would make the object:
    var x = {                           let x = [
      w = a;                             w = a,
      y = b;                             y = b,
       z = c;                            z = c,
       }                                 ];
 2. Then i use:
    Object.freeze(x);
In JavaScript there is something called arrow functions, these functions are antonymous and are written so:
 const fechas = function (){
    return new Date();
 }
 And with the arrow functions we can write them so:
  const fechas = () => new Date();
 And to add parameters in this function i must write then in parentheses.
To add a Array with another Array we use:
  x<Array what i gonna add another Array.>.concat(y<The Array That i gonna add.>);
In JavaScript there is a operator called rest, this operator is be able to do parameters in a function and convert them in a Array so:
  function x (...a){
    console.log(a);
  }
In the operator rest there is a method called .reduce(), is be able to add the parameters and add with the elements in an Array so:
  const sumar = (...args) => {
    return args.reduce((a + b) => a + b, 0);
  }
In JavaScript there is an operator called spread and this operator decompose<descomponer> in separate elements of a Array and to add them in the parameters of a function so:
  const numeros = [1, 2,3];
  function sumar (x, y, z){
    return x + y +z;
  }
  console.log(sumar(...numeros<add the variable that contents the Array.>));<That is the operator spread>
In JavaScript there is something called destructuring syntax, this servers to add to a variable properties of a object so:
  const usuario = {
  a = x,
  b = y 
  };
  const {nombre, edad} = usuario;
And to do that in nested objects<objetos anidados.> we ca do it so:
   const usuario = {
  a = {
   c = x,
   b = y
  }
  };
  const {a : {nombre, edad}} = usuario;
In JavaScript there is something called literal or string templates<plantillas literales o de cadena> and that is something what help us to do so that the code is better and these are some features<caracteristicas> of this:
  1. Backtick is used so: ``
  2. Can contain simple stings and double strings.
  3. The lines are keep how code is written.
  4. To replace a variable write ${x}.
  5. Within ${} yet you can write expressions.
  For example:
   var a = 6; 
    console.log(`El valor de a es : ${a}`);
Before to do a function that return me an object we used:
  const x = (x, y, z) => {
    return {
      w = a,
      x = b,
      y = c
    };
  };
But we could do it so:
  const x = (x, y, z) => ({x, y, z});
In JavaScript we can do classes in our code and functions within theirs but there are two functions that allow us to protect the data of our object, and those are getters and setters.
 1. Getters is a function that allow us to get values of a private property.
 2. Setters is a function that allow us to upload values of a private property.
 These are used so:
   class x {
    constructor(){
      this._<private property>y;
    }
    <getters>
    get y (){
      return this._y;
    }
    <setters>
    set y (z) {
      this._y = z;
    }
   }